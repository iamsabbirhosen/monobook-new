{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 271, "column": 0}, "map": {"version":3,"sources":["file:///E:/MonoBook%20New%20Interface/monobook-new/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\r\nimport {googleAI} from '@genkit-ai/google-genai';\r\n\r\nexport const ai = genkit({\r\n  plugins: [googleAI()],\r\n  model: 'googleai/gemini-2.5-flash',\r\n});\r\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,6KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 300, "column": 0}, "map": {"version":3,"sources":["file:///E:/MonoBook%20New%20Interface/monobook-new/src/ai/flows/explain-difficult-page.ts"],"sourcesContent":["'use server';\r\n\r\n/**\r\n * @fileOverview AI flow to explain a difficult page of a book.\r\n *\r\n * - explainDifficultPage - A function that explains the content of a difficult page.\r\n * - ExplainDifficultPageInput - The input type for the explainDifficultPage function.\r\n * - ExplainDifficultPageOutput - The return type for the explainDifficultPage function.\r\n */\r\n\r\nimport {ai} from '@/ai/genkit';\r\nimport {z} from 'genkit';\r\nimport { GoogleGenerativeAI } from '@google/generative-ai';\r\nimport fs from 'fs';\r\nimport path from 'path';\r\nimport { createWorker, createScheduler, RecognizeResult, WorkerParams } from 'tesseract.js';\r\n\r\nconst ExplainDifficultPageInputSchema = z.object({\r\n  imageUrl: z.string().describe('The URL of the page image to analyze'),\r\n  prompt: z.string().describe('The prompt to send to Gemini'),\r\n  apiKey: z.string().describe('The Gemini API key'),\r\n});\r\nexport type ExplainDifficultPageInput = z.infer<typeof ExplainDifficultPageInputSchema>;\r\n\r\nconst ExplainDifficultPageOutputSchema = z.object({\r\n  explanation: z\r\n    .string()\r\n    .describe('The explanation of the page content in an easy-to-understand way.'),\r\n});\r\nexport type ExplainDifficultPageOutput = z.infer<typeof ExplainDifficultPageOutputSchema>;\r\n\r\nexport async function explainDifficultPage(\r\n  input: ExplainDifficultPageInput\r\n): Promise<ExplainDifficultPageOutput> {\r\n  return explainDifficultPageFlow(input);\r\n}\r\n\r\nconst extractTextFromImage = async (imagePath: string) => {\r\n  console.log('Initializing Tesseract scheduler and worker...');\r\n  const scheduler = createScheduler();\r\n  const worker = await createWorker({\r\n    langPath: path.join(process.cwd(), 'public', 'tessdata'),\r\n    logger: progress => {\r\n      if (progress.status === 'recognizing text') {\r\n        console.log(`Recognition progress: ${progress.progress * 100}%`);\r\n      }\r\n    }\r\n  });\r\n\r\n  try {\r\n    await scheduler.addWorker(worker);\r\n    \r\n    console.log('Loading Tesseract with Bengali and English support...');\r\n    await worker.loadLanguage('eng+ben');\r\n    await worker.initialize('eng+ben');\r\n    \r\n    console.log('Processing image with Tesseract...');\r\n    const result = await worker.recognize(imagePath, {\r\n      tessedit_ocr_engine_mode: 3, // Default + LSTM engines\r\n      tessedit_pageseg_mode: 3, // Fully automatic page segmentation, but no OSD (PSM_AUTO)\r\n      preserve_interword_spaces: '1',\r\n      tessjs_create_pdf: '1',\r\n      tessjs_create_hocr: '1',\r\n    });\r\n\r\n    console.log('Text extraction completed');\r\n    \r\n    if (!result.data.text || result.data.text.trim() === '') {\r\n      throw new Error('No text was extracted from the image');\r\n    }\r\n\r\n    // Clean up the extracted text\r\n    const cleanedText = result.data.text\r\n      .replace(/\\s+/g, ' ')  // Replace multiple spaces with single space\r\n      .replace(/[\\r\\n]+/g, '\\n')  // Replace multiple newlines with single newline\r\n      .trim();\r\n\r\n    console.log('Extracted text sample:', cleanedText.substring(0, 200) + '...');\r\n    \r\n    await scheduler.terminate();\r\n    return cleanedText;\r\n  } catch (error) {\r\n    console.error('Tesseract error:', error);\r\n    await scheduler.terminate();\r\n    throw error instanceof Error \r\n      ? error \r\n      : new Error('Unknown error during text extraction');\r\n  }\r\n};\r\n\r\nconst analyzeImage = async (imageUrl: string, prompt: string, apiKey: string) => {\r\n  if (!apiKey || apiKey.trim() === '') {\r\n    throw new Error('Invalid API key: API key is required');\r\n  }\r\n  try {\r\n    // Extract bookId and page number from the URL\r\n    const urlParts = imageUrl.split('/');\r\n    const bookId = urlParts[urlParts.length - 2];\r\n    const fileName = urlParts[urlParts.length - 1];\r\n    \r\n    // Construct the file path relative to public directory\r\n    const imagePath = path.join(process.cwd(), 'public', 'pdfbooks', bookId, fileName);\r\n    console.log('Reading image from:', imagePath);\r\n    \r\n    // Extract text from image using Tesseract\r\n    console.log('Extracting text from image...');\r\n    const extractedText = await extractTextFromImage(imagePath);\r\n    console.log('Extracted text:', extractedText.substring(0, 100) + '...');\r\n    \r\n    // Initialize Gemini\r\n    const genAI = new GoogleGenerativeAI(apiKey);\r\n    const model = genAI.getGenerativeModel({ model: \"gemini-pro\" }); // Using text-only model\r\n    \r\n    // Prepare prompt with extracted text\r\n    const enhancedPrompt = `\r\nThe following text is extracted from a textbook page. Please teach this content like an ideal teacher with examples:\r\n\r\n${extractedText}\r\n\r\nPlease provide:\r\n1. A clear explanation of the main concepts\r\n2. Real-world examples to illustrate the concepts\r\n3. Key points to remember\r\n4. Practice questions if applicable\r\n    `.trim();\r\n    \r\n    console.log('Sending request to Gemini with enhanced prompt...');\r\n    const result = await model.generateContent(enhancedPrompt);\r\n    const response = await result.response;\r\n    const text = response.text();\r\n    console.log('Received response from Gemini:', text.substring(0, 100) + '...'); // Show first 100 chars\r\n    \r\n    return text;\r\n  } catch (error) {\r\n    console.error('Error in analyzeImage:', error);\r\n    if (error instanceof Error) {\r\n      throw new Error(`Image analysis failed: ${error.message}`);\r\n    } else {\r\n      throw new Error('Image analysis failed: Unknown error');\r\n    }\r\n  }\r\n};\r\n\r\nconst blobToBase64 = (blob: Blob): Promise<string> => {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.onloadend = () => {\r\n      if (typeof reader.result === 'string') {\r\n        resolve(reader.result.split(',')[1]);\r\n      } else {\r\n        reject(new Error('Failed to convert blob to base64'));\r\n      }\r\n    };\r\n    reader.onerror = reject;\r\n    reader.readAsDataURL(blob);\r\n  });\r\n};\r\n\r\nconst explainDifficultPageFlow = ai.defineFlow(\r\n  {\r\n    name: 'explainDifficultPageFlow',\r\n    inputSchema: ExplainDifficultPageInputSchema,\r\n    outputSchema: ExplainDifficultPageOutputSchema,\r\n  },\r\n  async input => {\r\n    const explanation = await analyzeImage(input.imageUrl, input.prompt, input.apiKey);\r\n    return { explanation };\r\n    return { explanation };\r\n  }\r\n);\r\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;AACA;AAEA;AACA;;;;;;;;;AAEA,MAAM,kCAAkC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC/C,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC5B,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC9B;AAGA,MAAM,mCAAmC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChD,aAAa,uIAAA,CAAA,IAAC,CACX,MAAM,GACN,QAAQ,CAAC;AACd;AAGO,eAAe,qBACpB,KAAgC;IAEhC,OAAO,yBAAyB;AAClC;AAEA,MAAM,uBAAuB,OAAO;IAClC,QAAQ,GAAG,CAAC;IACZ,MAAM,YAAY,CAAA,GAAA,+IAAA,CAAA,kBAAe,AAAD;IAChC,MAAM,SAAS,MAAM,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE;QAChC,UAAU,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,UAAU;QAC7C,QAAQ,CAAA;YACN,IAAI,SAAS,MAAM,KAAK,oBAAoB;gBAC1C,QAAQ,GAAG,CAAC,CAAC,sBAAsB,EAAE,SAAS,QAAQ,GAAG,IAAI,CAAC,CAAC;YACjE;QACF;IACF;IAEA,IAAI;QACF,MAAM,UAAU,SAAS,CAAC;QAE1B,QAAQ,GAAG,CAAC;QACZ,MAAM,OAAO,YAAY,CAAC;QAC1B,MAAM,OAAO,UAAU,CAAC;QAExB,QAAQ,GAAG,CAAC;QACZ,MAAM,SAAS,MAAM,OAAO,SAAS,CAAC,WAAW;YAC/C,0BAA0B;YAC1B,uBAAuB;YACvB,2BAA2B;YAC3B,mBAAmB;YACnB,oBAAoB;QACtB;QAEA,QAAQ,GAAG,CAAC;QAEZ,IAAI,CAAC,OAAO,IAAI,CAAC,IAAI,IAAI,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,OAAO,IAAI;YACvD,MAAM,IAAI,MAAM;QAClB;QAEA,8BAA8B;QAC9B,MAAM,cAAc,OAAO,IAAI,CAAC,IAAI,CACjC,OAAO,CAAC,QAAQ,KAAM,4CAA4C;SAClE,OAAO,CAAC,YAAY,MAAO,gDAAgD;SAC3E,IAAI;QAEP,QAAQ,GAAG,CAAC,0BAA0B,YAAY,SAAS,CAAC,GAAG,OAAO;QAEtE,MAAM,UAAU,SAAS;QACzB,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,oBAAoB;QAClC,MAAM,UAAU,SAAS;QACzB,MAAM,iBAAiB,QACnB,QACA,IAAI,MAAM;IAChB;AACF;AAEA,MAAM,eAAe,OAAO,UAAkB,QAAgB;IAC5D,IAAI,CAAC,UAAU,OAAO,IAAI,OAAO,IAAI;QACnC,MAAM,IAAI,MAAM;IAClB;IACA,IAAI;QACF,8CAA8C;QAC9C,MAAM,WAAW,SAAS,KAAK,CAAC;QAChC,MAAM,SAAS,QAAQ,CAAC,SAAS,MAAM,GAAG,EAAE;QAC5C,MAAM,WAAW,QAAQ,CAAC,SAAS,MAAM,GAAG,EAAE;QAE9C,uDAAuD;QACvD,MAAM,YAAY,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,UAAU,YAAY,QAAQ;QACzE,QAAQ,GAAG,CAAC,uBAAuB;QAEnC,0CAA0C;QAC1C,QAAQ,GAAG,CAAC;QACZ,MAAM,gBAAgB,MAAM,qBAAqB;QACjD,QAAQ,GAAG,CAAC,mBAAmB,cAAc,SAAS,CAAC,GAAG,OAAO;QAEjE,oBAAoB;QACpB,MAAM,QAAQ,IAAI,8JAAA,CAAA,qBAAkB,CAAC;QACrC,MAAM,QAAQ,MAAM,kBAAkB,CAAC;YAAE,OAAO;QAAa,IAAI,wBAAwB;QAEzF,qCAAqC;QACrC,MAAM,iBAAiB,CAAC;;;AAG5B,EAAE,cAAc;;;;;;;IAOZ,CAAC,CAAC,IAAI;QAEN,QAAQ,GAAG,CAAC;QACZ,MAAM,SAAS,MAAM,MAAM,eAAe,CAAC;QAC3C,MAAM,WAAW,MAAM,OAAO,QAAQ;QACtC,MAAM,OAAO,SAAS,IAAI;QAC1B,QAAQ,GAAG,CAAC,kCAAkC,KAAK,SAAS,CAAC,GAAG,OAAO,QAAQ,uBAAuB;QAEtG,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QACxC,IAAI,iBAAiB,OAAO;YAC1B,MAAM,IAAI,MAAM,CAAC,uBAAuB,EAAE,MAAM,OAAO,EAAE;QAC3D,OAAO;YACL,MAAM,IAAI,MAAM;QAClB;IACF;AACF;AAEA,MAAM,eAAe,CAAC;IACpB,OAAO,IAAI,QAAQ,CAAC,SAAS;QAC3B,MAAM,SAAS,IAAI;QACnB,OAAO,SAAS,GAAG;YACjB,IAAI,OAAO,OAAO,MAAM,KAAK,UAAU;gBACrC,QAAQ,OAAO,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;YACrC,OAAO;gBACL,OAAO,IAAI,MAAM;YACnB;QACF;QACA,OAAO,OAAO,GAAG;QACjB,OAAO,aAAa,CAAC;IACvB;AACF;AAEA,MAAM,2BAA2B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC5C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,cAAc,MAAM,aAAa,MAAM,QAAQ,EAAE,MAAM,MAAM,EAAE,MAAM,MAAM;IACjF,OAAO;QAAE;IAAY;;AAEvB;;;IAzIoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 461, "column": 0}, "map": {"version":3,"sources":["file:///E:/MonoBook%20New%20Interface/monobook-new/.next-internal/server/app/reader/%5BbookId%5D/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {explainDifficultPage as '400af1c4f56dccc433ca992a8a235f7ce477aea65f'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 519, "column": 0}, "map": {"version":3,"sources":["file:///E:/MonoBook%20New%20Interface/monobook-new/src/app/reader/%5BbookId%5D/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/reader/[bookId]/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/reader/[bookId]/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoS,GACjU,kEACA","debugId":null}},
    {"offset": {"line": 533, "column": 0}, "map": {"version":3,"sources":["file:///E:/MonoBook%20New%20Interface/monobook-new/src/app/reader/%5BbookId%5D/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/reader/[bookId]/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/reader/[bookId]/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgR,GAC7S,8CACA","debugId":null}},
    {"offset": {"line": 547, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}