{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 332, "column": 0}, "map": {"version":3,"sources":["file:///E:/MonoBook%20New%20Interface/monobook-new/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\r\nimport {googleAI} from '@genkit-ai/google-genai';\r\n\r\nexport const ai = genkit({\r\n  plugins: [googleAI()],\r\n  model: 'googleai/gemini-2.5-flash',\r\n});\r\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,yIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,+KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 361, "column": 0}, "map": {"version":3,"sources":["file:///E:/MonoBook%20New%20Interface/monobook-new/src/ai/flows/explain-difficult-page.ts"],"sourcesContent":["'use server';\r\n\r\n/**\r\n * @fileOverview AI flow to explain a difficult page of a book.\r\n *\r\n * - explainDifficultPage - A function that explains the content of a difficult page.\r\n * - ExplainDifficultPageInput - The input type for the explainDifficultPage function.\r\n * - ExplainDifficultPageOutput - The return type for the explainDifficultPage function.\r\n */\r\n\r\nimport {ai} from '@/ai/genkit';\r\nimport {z} from 'genkit';\r\nimport { GoogleGenerativeAI } from '@google/generative-ai';\r\nimport fs from 'fs';\r\nimport path from 'path';\r\nimport { createWorker, createScheduler } from 'tesseract.js';\r\n\r\nconst ExplainDifficultPageInputSchema = z.object({\r\n  imageUrl: z.string().describe('The URL of the page image to analyze'),\r\n  prompt: z.string().describe('The prompt to send to Gemini'),\r\n  apiKey: z.string().describe('The Gemini API key'),\r\n});\r\nexport type ExplainDifficultPageInput = z.infer<typeof ExplainDifficultPageInputSchema>;\r\n\r\nconst ExplainDifficultPageOutputSchema = z.object({\r\n  explanation: z\r\n    .string()\r\n    .describe('The explanation of the page content in an easy-to-understand way.'),\r\n});\r\nexport type ExplainDifficultPageOutput = z.infer<typeof ExplainDifficultPageOutputSchema>;\r\n\r\nexport async function explainDifficultPage(\r\n  input: ExplainDifficultPageInput\r\n): Promise<ExplainDifficultPageOutput> {\r\n  return explainDifficultPageFlow(input);\r\n}\r\n\r\nconst fetchImageAsBase64 = async (imageUrl: string): Promise<string> => {\r\n  // If it's a local path starting with /\r\n  if (imageUrl.startsWith('/')) {\r\n    const filePath = path.join(process.cwd(), 'public', imageUrl);\r\n    const buffer = await fs.promises.readFile(filePath);\r\n    return buffer.toString('base64');\r\n  }\r\n  \r\n  // If it's a full URL\r\n  const response = await fetch(imageUrl);\r\n  const arrayBuffer = await response.arrayBuffer();\r\n  const buffer = Buffer.from(arrayBuffer);\r\n  return buffer.toString('base64');\r\n};\r\n\r\nconst extractTextFromImage = async (imagePath: string) => {\r\n  console.log('Initializing Tesseract worker...');\r\n  \r\n  // Initialize worker with Bengali support\r\n  const worker = await createWorker();\r\n\r\n  try {\r\n    console.log('Loading Bengali (Bangla) support...');\r\n    // Set language to Bengali\r\n    await worker.load();\r\n    await worker.reinitialize('ben');\r\n    \r\n    console.log('Processing image with Tesseract...');\r\n    const result = await worker.recognize(imagePath);\r\n\r\n    console.log('Text extraction completed');\r\n    \r\n    if (!result.data.text || result.data.text.trim() === '') {\r\n      throw new Error('No text was extracted from the image');\r\n    }\r\n\r\n    // Clean up the extracted text\r\n    const cleanedText = result.data.text\r\n      .replace(/\\s+/g, ' ')  // Replace multiple spaces with single space\r\n      .replace(/[\\r\\n]+/g, '\\n')  // Replace multiple newlines with single newline\r\n      .trim();\r\n\r\n    console.log('Extracted text sample:', cleanedText.substring(0, 200) + '...');\r\n    \r\n    await worker.terminate();\r\n    return cleanedText;\r\n  } catch (error) {\r\n    console.error('Tesseract error:', error);\r\n    await worker.terminate();\r\n    throw error instanceof Error \r\n      ? error \r\n      : new Error('Unknown error during text extraction');\r\n  }\r\n};\r\n\r\nconst analyzeImage = async (imageUrl: string, prompt: string, apiKey: string) => {\r\n  if (!apiKey || apiKey.trim() === '') {\r\n    throw new Error('Invalid API key: API key is required');\r\n  }\r\n  try {\r\n    let imagePath: string;\r\n    \r\n    // Check if the URL is absolute or relative\r\n    if (imageUrl.startsWith('http')) {\r\n      // For remote URLs, download the image to a temporary file\r\n      const response = await fetch(imageUrl);\r\n      const arrayBuffer = await response.arrayBuffer();\r\n      const buffer = Buffer.from(arrayBuffer);\r\n      \r\n      // Create a temporary file\r\n      const tempDir = path.join(process.cwd(), 'tmp');\r\n      if (!fs.existsSync(tempDir)) {\r\n        fs.mkdirSync(tempDir);\r\n      }\r\n      imagePath = path.join(tempDir, 'temp-image-' + Date.now() + '.jpg');\r\n      await fs.promises.writeFile(imagePath, buffer);\r\n    } else {\r\n      // For local paths\r\n      const urlParts = imageUrl.split('/');\r\n      const bookId = urlParts[urlParts.length - 2];\r\n      const fileName = urlParts[urlParts.length - 1];\r\n      imagePath = path.join(process.cwd(), 'public', 'pdfbooks', bookId, fileName);\r\n    }\r\n    \r\n    console.log('Reading image from:', imagePath);\r\n    \r\n    // Extract text from image using Tesseract\r\n    console.log('Extracting text from image...');\r\n    const extractedText = await extractTextFromImage(imagePath);\r\n    \r\n    // Clean up temporary file if it was created\r\n    if (imagePath.includes('temp-image-')) {\r\n      try {\r\n        await fs.promises.unlink(imagePath);\r\n      } catch (error) {\r\n        console.error('Error cleaning up temporary file:', error);\r\n      }\r\n    }\r\n    console.log('Extracted text:', extractedText.substring(0, 100) + '...');\r\n    \r\n    // Initialize Gemini\r\n    const genAI = new GoogleGenerativeAI(apiKey);\r\n    const model = genAI.getGenerativeModel({ model: \"gemini-pro\" }); // Using text-only model\r\n    \r\n    // Prepare prompt with extracted text\r\n    const enhancedPrompt = `\r\nThe following text is extracted from a Bengali (Bangla) textbook page. Please translate it to English first, then teach this content like an ideal teacher with examples:\r\n\r\n${extractedText}\r\n\r\nPlease provide your response in this format:\r\n1. English Translation of the Text\r\n2. Clear Explanation of the Main Concepts\r\n3. Real-world Examples to Illustrate the Concepts\r\n4. Key Points to Remember\r\n5. Practice Questions (if applicable)\r\n\r\nPlease ensure the explanation is thorough but easy to understand.\r\n    `.trim();\r\n    \r\n    console.log('Sending request to Gemini with enhanced prompt...');\r\n    const result = await model.generateContent(enhancedPrompt);\r\n    const response = await result.response;\r\n    const text = response.text();\r\n    console.log('Received response from Gemini:', text.substring(0, 100) + '...'); // Show first 100 chars\r\n    \r\n    return text;\r\n  } catch (error) {\r\n    console.error('Error in analyzeImage:', error);\r\n    if (error instanceof Error) {\r\n      throw new Error(`Image analysis failed: ${error.message}`);\r\n    } else {\r\n      throw new Error('Image analysis failed: Unknown error');\r\n    }\r\n  }\r\n};\r\n\r\nconst blobToBase64 = (blob: Blob): Promise<string> => {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.onloadend = () => {\r\n      if (typeof reader.result === 'string') {\r\n        resolve(reader.result.split(',')[1]);\r\n      } else {\r\n        reject(new Error('Failed to convert blob to base64'));\r\n      }\r\n    };\r\n    reader.onerror = reject;\r\n    reader.readAsDataURL(blob);\r\n  });\r\n};\r\n\r\nconst explainDifficultPageFlow = ai.defineFlow(\r\n  {\r\n    name: 'explainDifficultPageFlow',\r\n    inputSchema: ExplainDifficultPageInputSchema,\r\n    outputSchema: ExplainDifficultPageOutputSchema,\r\n  },\r\n  async input => {\r\n    const explanation = await analyzeImage(input.imageUrl, input.prompt, input.apiKey);\r\n    return { explanation };\r\n    return { explanation };\r\n  }\r\n);\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 558, "column": 0}, "map": {"version":3,"sources":["file:///E:/MonoBook%20New%20Interface/monobook-new/src/app/api/explain/route.ts"],"sourcesContent":["import { explainDifficultPage } from '@/ai/flows/explain-difficult-page';\r\nimport { NextRequest, NextResponse } from 'next/server';\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const { imageUrl, prompt, apiKey } = await request.json();\r\n    \r\n    if (!imageUrl || !prompt || !apiKey) {\r\n      return NextResponse.json(\r\n        { error: 'Missing required fields' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const result = await explainDifficultPage({\r\n      imageUrl,\r\n      prompt,\r\n      apiKey\r\n    });\r\n\r\n    return NextResponse.json(result);\r\n  } catch (error) {\r\n    console.error('API Error:', error);\r\n    return NextResponse.json(\r\n      { error: error instanceof Error ? error.message : 'An error occurred' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,QAAQ,IAAI;QAEvD,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,QAAQ;YACnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA0B,GACnC;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,SAAS,MAAM,CAAA,GAAA,oJAAA,CAAA,uBAAoB,AAAD,EAAE;YACxC;YACA;YACA;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,cAAc;QAC5B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAAoB,GACtE;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}