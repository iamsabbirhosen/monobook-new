{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 132, "column": 0}, "map": {"version":3,"sources":["file:///E:/MonoBook%20New%20Interface/monobook-new/src/lib/bengali-ocr.ts"],"sourcesContent":["'use server';\r\n\r\n/**\r\n * @fileOverview Bengali OCR text extraction from book pages\r\n */\r\n\r\nimport fs from 'fs';\r\nimport path from 'path';\r\nimport { createWorker } from 'tesseract.js';\r\n\r\ninterface ExtractTextInput {\r\n  imagePath: string;\r\n}\r\n\r\ninterface ExtractTextOutput {\r\n  text: string;\r\n  confidence: number;\r\n}\r\n\r\nasync function performBengaliOCR(\r\n  input: ExtractTextInput\r\n): Promise<ExtractTextOutput> {\r\n  console.log('Starting Bengali OCR process...');\r\n  \r\n  const worker = await createWorker();\r\n  \r\n  try {\r\n    console.log('Loading Bengali support...');\r\n    await worker.reinitialize('ben');\r\n\r\n    console.log('Processing image:', input.imagePath);\r\n    const { data } = await worker.recognize(input.imagePath);\r\n\r\n    // Clean up the extracted text\r\n    const cleanedText = data.text\r\n      .replace(/\\s+/g, ' ') // Replace multiple spaces with single space\r\n      .replace(/[\\r\\n]+/g, '\\n') // Replace multiple newlines with single newline\r\n      .trim();\r\n\r\n    console.log('OCR Confidence:', data.confidence);\r\n    console.log('Text sample:', cleanedText.substring(0, 100) + '...');\r\n\r\n    await worker.terminate();\r\n\r\n    return {\r\n      text: cleanedText,\r\n      confidence: data.confidence\r\n    };\r\n  } catch (error) {\r\n    console.error('OCR Error:', error);\r\n    await worker.terminate();\r\n    throw error instanceof Error \r\n      ? error \r\n      : new Error('Unknown error during OCR');\r\n  }\r\n}\r\n\r\nexport async function extractBengaliText(\r\n  input: ExtractTextInput\r\n): Promise<ExtractTextOutput> {\r\n  return performBengaliOCR(input);\r\n}"],"names":[],"mappings":";;;;;AAQA;;;;;AAWA,eAAe,kBACb,KAAuB;IAEvB,QAAQ,GAAG,CAAC;IAEZ,MAAM,SAAS,MAAM,CAAA,GAAA,iJAAA,CAAA,eAAY,AAAD;IAEhC,IAAI;QACF,QAAQ,GAAG,CAAC;QACZ,MAAM,OAAO,YAAY,CAAC;QAE1B,QAAQ,GAAG,CAAC,qBAAqB,MAAM,SAAS;QAChD,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,OAAO,SAAS,CAAC,MAAM,SAAS;QAEvD,8BAA8B;QAC9B,MAAM,cAAc,KAAK,IAAI,CAC1B,OAAO,CAAC,QAAQ,KAAK,4CAA4C;SACjE,OAAO,CAAC,YAAY,MAAM,gDAAgD;SAC1E,IAAI;QAEP,QAAQ,GAAG,CAAC,mBAAmB,KAAK,UAAU;QAC9C,QAAQ,GAAG,CAAC,gBAAgB,YAAY,SAAS,CAAC,GAAG,OAAO;QAE5D,MAAM,OAAO,SAAS;QAEtB,OAAO;YACL,MAAM;YACN,YAAY,KAAK,UAAU;QAC7B;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,cAAc;QAC5B,MAAM,OAAO,SAAS;QACtB,MAAM,iBAAiB,QACnB,QACA,IAAI,MAAM;IAChB;AACF;AAEO,eAAe,mBACpB,KAAuB;IAEvB,OAAO,kBAAkB;AAC3B;;;IAJsB;;AAAA,iPAAA","debugId":null}},
    {"offset": {"line": 189, "column": 0}, "map": {"version":3,"sources":["file:///E:/MonoBook%20New%20Interface/monobook-new/src/app/api/ocr/route.ts"],"sourcesContent":["import { extractBengaliText } from '@/lib/bengali-ocr';\r\nimport { NextRequest, NextResponse } from 'next/server';\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const { imagePath } = await request.json();\r\n    \r\n    if (!imagePath) {\r\n      return NextResponse.json(\r\n        { error: 'Image path is required' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const result = await extractBengaliText({ imagePath });\r\n\r\n    return NextResponse.json(result);\r\n  } catch (error) {\r\n    console.error('OCR API Error:', error);\r\n    return NextResponse.json(\r\n      { error: error instanceof Error ? error.message : 'An error occurred during OCR' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,QAAQ,IAAI;QAExC,IAAI,CAAC,WAAW;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAyB,GAClC;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,SAAS,MAAM,CAAA,GAAA,8HAAA,CAAA,qBAAkB,AAAD,EAAE;YAAE;QAAU;QAEpD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kBAAkB;QAChC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAA+B,GACjF;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}