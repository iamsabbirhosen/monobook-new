{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 332, "column": 0}, "map": {"version":3,"sources":["file:///E:/MonoBook%20New%20Interface/monobook-new/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\r\nimport {googleAI} from '@genkit-ai/google-genai';\r\n\r\nexport const ai = genkit({\r\n  plugins: [googleAI()],\r\n  model: 'googleai/gemini-2.5-flash',\r\n});\r\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,yIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,+KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 353, "column": 0}, "map": {"version":3,"sources":["file:///E:/MonoBook%20New%20Interface/monobook-new/src/ai/flows/explain-difficult-page.ts"],"sourcesContent":["'use server';\r\n\r\n/**\r\n * @fileOverview AI flow to explain a difficult page of a book.\r\n *\r\n * - explainDifficultPage - A function that explains the content of a difficult page.\r\n * - ExplainDifficultPageInput - The input type for the explainDifficultPage function.\r\n * - ExplainDifficultPageOutput - The return type for the explainDifficultPage function.\r\n */\r\n\r\nimport {ai} from '@/ai/genkit';\r\nimport {z} from 'genkit';\r\nimport { GoogleGenerativeAI } from '@google/generative-ai';\r\nimport fs from 'fs';\r\nimport path from 'path';\r\n\r\nconst ExplainDifficultPageInputSchema = z.object({\r\n  imageUrl: z.string().describe('The URL of the page image to analyze'),\r\n  prompt: z.string().describe('The prompt to send to Gemini'),\r\n  apiKey: z.string().describe('The Gemini API key'),\r\n});\r\nexport type ExplainDifficultPageInput = z.infer<typeof ExplainDifficultPageInputSchema>;\r\n\r\nconst ExplainDifficultPageOutputSchema = z.object({\r\n  explanation: z\r\n    .string()\r\n    .describe('The explanation of the page content in an easy-to-understand way.'),\r\n});\r\nexport type ExplainDifficultPageOutput = z.infer<typeof ExplainDifficultPageOutputSchema>;\r\n\r\nexport async function explainDifficultPage(\r\n  input: ExplainDifficultPageInput\r\n): Promise<ExplainDifficultPageOutput> {\r\n  return explainDifficultPageFlow(input);\r\n}\r\n\r\nconst getImageBuffer = async (imageUrl: string): Promise<Buffer> => {\r\n  try {\r\n    let imagePath: string;\r\n    let imageBuffer: Buffer;\r\n\r\n    if (imageUrl.startsWith('http')) {\r\n      // For remote URLs, fetch the image directly\r\n      const response = await fetch(imageUrl);\r\n      const arrayBuffer = await response.arrayBuffer();\r\n      imageBuffer = Buffer.from(arrayBuffer);\r\n    } else {\r\n      // For local paths\r\n      const urlParts = imageUrl.split('/');\r\n      const bookId = urlParts[urlParts.length - 2];\r\n      const fileName = urlParts[urlParts.length - 1];\r\n      imagePath = path.join(process.cwd(), 'public', 'pdfbooks', bookId, fileName);\r\n      imageBuffer = await fs.promises.readFile(imagePath);\r\n    }\r\n\r\n    return imageBuffer;\r\n  } catch (error) {\r\n    console.error('Error getting image data:', error);\r\n    throw error instanceof Error \r\n      ? error \r\n      : new Error('Failed to process image');\r\n  }\r\n};\r\n\r\nconst analyzeImage = async (imageUrl: string, prompt: string, apiKey: string) => {\r\n  if (!apiKey || apiKey.trim() === '') {\r\n    throw new Error('Invalid API key: API key is required');\r\n  }\r\n\r\n  try {\r\n    console.log('Processing image:', imageUrl);\r\n\r\n    // Handle the path\r\n    let fullPath: string;\r\n    \r\n    // If it's already an absolute path, use it directly\r\n    if (path.isAbsolute(imageUrl)) {\r\n      fullPath = imageUrl;\r\n    } else {\r\n      // Remove leading slash if present\r\n      const relativePath = imageUrl.startsWith('/') ? imageUrl.slice(1) : imageUrl;\r\n      fullPath = path.join(process.cwd(), 'public', relativePath);\r\n    }\r\n\r\n    console.log('Reading image from:', fullPath);\r\n\r\n    // Verify file exists\r\n    try {\r\n      await fs.promises.access(fullPath, fs.constants.R_OK);\r\n    } catch (error) {\r\n      console.error('File access error:', error);\r\n      throw new Error(`Image file not found at: ${fullPath}`);\r\n    }\r\n\r\n    // Read the image file\r\n    const imageBuffer = await fs.promises.readFile(fullPath);\r\n    const base64Data = imageBuffer.toString('base64');\r\n\r\n    console.log('Image loaded successfully');\r\n\r\n    // Initialize Gemini\r\n    const genAI = new GoogleGenerativeAI(apiKey);\r\n    const model = genAI.getGenerativeModel({ model: \"gemini-pro-vision\" }); // Using vision model\r\n\r\n    const promptText = `This is a page from a Bengali (Bangla) textbook. Please analyze this image and:\r\n\r\n1. First, carefully read and understand the Bengali text shown in the image\r\n2. Provide an accurate English translation of the Bengali text\r\n3. Explain the main concepts and ideas presented in the text\r\n4. Give practical examples to help understand the concepts\r\n5. List the key points to remember\r\n\r\nImportant: Please focus on accurate translation and clear explanation of the Bengali text.\r\n\r\nPlease format your response as:\r\n1. English Translation\r\n2. Main Concepts Explanation\r\n3. Real-world Examples\r\n4. Key Points to Remember\r\n5. Practice Questions (if relevant)`;\r\n\r\n    console.log('Sending request to Gemini...');\r\n    const result = await model.generateContent([\r\n      {\r\n        text: promptText\r\n      },\r\n      {\r\n        inlineData: {\r\n          mimeType: 'image/jpeg',\r\n          data: base64Data\r\n        }\r\n      }\r\n    ]);    const response = await result.response;\r\n    const text = response.text();\r\n    console.log('Received response from Gemini:', text.substring(0, 100) + '...');\r\n    \r\n    return text;\r\n  } catch (error) {\r\n    console.error('Error in analyzeImage:', error);\r\n    if (error instanceof Error) {\r\n      throw new Error(`Image analysis failed: ${error.message}`);\r\n    } else {\r\n      throw new Error('Image analysis failed: Unknown error');\r\n    }\r\n  }\r\n};\r\n\r\nconst explainDifficultPageFlow = ai.defineFlow(\r\n  {\r\n    name: 'explainDifficultPageFlow',\r\n    inputSchema: ExplainDifficultPageInputSchema,\r\n    outputSchema: ExplainDifficultPageOutputSchema,\r\n  },\r\n  async input => {\r\n    const explanation = await analyzeImage(input.imageUrl, input.prompt, input.apiKey);\r\n    return { explanation };\r\n    return { explanation };\r\n  }\r\n);\r\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;AAEA,MAAM,kCAAkC,yIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC/C,UAAU,yIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,QAAQ,yIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC5B,QAAQ,yIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC9B;AAGA,MAAM,mCAAmC,yIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChD,aAAa,yIAAA,CAAA,IAAC,CACX,MAAM,GACN,QAAQ,CAAC;AACd;AAGO,eAAe,qBACpB,KAAgC;IAEhC,OAAO,yBAAyB;AAClC;AAEA,MAAM,iBAAiB,OAAO;IAC5B,IAAI;QACF,IAAI;QACJ,IAAI;QAEJ,IAAI,SAAS,UAAU,CAAC,SAAS;YAC/B,4CAA4C;YAC5C,MAAM,WAAW,MAAM,MAAM;YAC7B,MAAM,cAAc,MAAM,SAAS,WAAW;YAC9C,cAAc,OAAO,IAAI,CAAC;QAC5B,OAAO;YACL,kBAAkB;YAClB,MAAM,WAAW,SAAS,KAAK,CAAC;YAChC,MAAM,SAAS,QAAQ,CAAC,SAAS,MAAM,GAAG,EAAE;YAC5C,MAAM,WAAW,QAAQ,CAAC,SAAS,MAAM,GAAG,EAAE;YAC9C,YAAY,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,UAAU,YAAY,QAAQ;YACnE,cAAc,MAAM,6FAAA,CAAA,UAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC;QAC3C;QAEA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,MAAM,iBAAiB,QACnB,QACA,IAAI,MAAM;IAChB;AACF;AAEA,MAAM,eAAe,OAAO,UAAkB,QAAgB;IAC5D,IAAI,CAAC,UAAU,OAAO,IAAI,OAAO,IAAI;QACnC,MAAM,IAAI,MAAM;IAClB;IAEA,IAAI;QACF,QAAQ,GAAG,CAAC,qBAAqB;QAEjC,kBAAkB;QAClB,IAAI;QAEJ,oDAAoD;QACpD,IAAI,iGAAA,CAAA,UAAI,CAAC,UAAU,CAAC,WAAW;YAC7B,WAAW;QACb,OAAO;YACL,kCAAkC;YAClC,MAAM,eAAe,SAAS,UAAU,CAAC,OAAO,SAAS,KAAK,CAAC,KAAK;YACpE,WAAW,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,UAAU;QAChD;QAEA,QAAQ,GAAG,CAAC,uBAAuB;QAEnC,qBAAqB;QACrB,IAAI;YACF,MAAM,6FAAA,CAAA,UAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAU,6FAAA,CAAA,UAAE,CAAC,SAAS,CAAC,IAAI;QACtD,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,sBAAsB;YACpC,MAAM,IAAI,MAAM,CAAC,yBAAyB,EAAE,UAAU;QACxD;QAEA,sBAAsB;QACtB,MAAM,cAAc,MAAM,6FAAA,CAAA,UAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC;QAC/C,MAAM,aAAa,YAAY,QAAQ,CAAC;QAExC,QAAQ,GAAG,CAAC;QAEZ,oBAAoB;QACpB,MAAM,QAAQ,IAAI,gKAAA,CAAA,qBAAkB,CAAC;QACrC,MAAM,QAAQ,MAAM,kBAAkB,CAAC;YAAE,OAAO;QAAoB,IAAI,qBAAqB;QAE7F,MAAM,aAAa,CAAC;;;;;;;;;;;;;;;mCAeW,CAAC;QAEhC,QAAQ,GAAG,CAAC;QACZ,MAAM,SAAS,MAAM,MAAM,eAAe,CAAC;YACzC;gBACE,MAAM;YACR;YACA;gBACE,YAAY;oBACV,UAAU;oBACV,MAAM;gBACR;YACF;SACD;QAAM,MAAM,WAAW,MAAM,OAAO,QAAQ;QAC7C,MAAM,OAAO,SAAS,IAAI;QAC1B,QAAQ,GAAG,CAAC,kCAAkC,KAAK,SAAS,CAAC,GAAG,OAAO;QAEvE,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QACxC,IAAI,iBAAiB,OAAO;YAC1B,MAAM,IAAI,MAAM,CAAC,uBAAuB,EAAE,MAAM,OAAO,EAAE;QAC3D,OAAO;YACL,MAAM,IAAI,MAAM;QAClB;IACF;AACF;AAEA,MAAM,2BAA2B,qHAAA,CAAA,KAAE,CAAC,UAAU,CAC5C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,cAAc,MAAM,aAAa,MAAM,QAAQ,EAAE,MAAM,MAAM,EAAE,MAAM,MAAM;IACjF,OAAO;QAAE;IAAY;;AAEvB;;;IA/HoB;;AAAA,iPAAA","debugId":null}},
    {"offset": {"line": 516, "column": 0}, "map": {"version":3,"sources":["file:///E:/MonoBook%20New%20Interface/monobook-new/src/app/api/explain/route.ts"],"sourcesContent":["import { explainDifficultPage } from '@/ai/flows/explain-difficult-page';\r\nimport { NextRequest, NextResponse } from 'next/server';\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const { imageUrl, prompt, apiKey } = await request.json();\r\n    \r\n    if (!imageUrl || !prompt || !apiKey) {\r\n      return NextResponse.json(\r\n        { error: 'Missing required fields' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const result = await explainDifficultPage({\r\n      imageUrl,\r\n      prompt,\r\n      apiKey\r\n    });\r\n\r\n    return NextResponse.json(result);\r\n  } catch (error) {\r\n    console.error('API Error:', error);\r\n    return NextResponse.json(\r\n      { error: error instanceof Error ? error.message : 'An error occurred' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,QAAQ,IAAI;QAEvD,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,QAAQ;YACnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA0B,GACnC;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,SAAS,MAAM,CAAA,GAAA,oJAAA,CAAA,uBAAoB,AAAD,EAAE;YACxC;YACA;YACA;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,cAAc;QAC5B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAAoB,GACtE;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}